<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0076)https://www.fit.vutbr.cz/study/courses/IOS/public/Lab/projekt2/projekt2.html -->
<html dir="ltr" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-2">


  
  <title>
    IOS: Projekt 2
  </title>

  <meta name="generator" content="DokuWiki Release 2009-12-25c &quot;Lemming&quot;">
<meta name="robots" content="noindex,nofollow">
<meta name="date" content="2010-02-22T10:23:58+0100">
<meta name="keywords" content="vyuka,ios,start">
<!--
<link rel="search" type="application/opensearchdescription+xml" href="https://www.fit.vutbr.cz/%7Esmrcka/w/lib/exe/opensearch.php" title="AS'wiki">
<link rel="start" href="https://www.fit.vutbr.cz/%7Esmrcka/w/">
<link rel="contents" href="https://www.fit.vutbr.cz/%7Esmrcka/w/doku.php?id=vyuka:ios:start&amp;do=index" title="Index">
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="https://www.fit.vutbr.cz/%7Esmrcka/w/feed.php">
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="https://www.fit.vutbr.cz/%7Esmrcka/w/feed.php?mode=list&amp;ns=vyuka:ios">
<link rel="edit" title="Edit this page" href="https://www.fit.vutbr.cz/%7Esmrcka/w/doku.php?id=vyuka:ios:start&amp;do=edit">
<link rel="alternate" type="text/html" title="Plain HTML" href="https://www.fit.vutbr.cz/%7Esmrcka/w/doku.php?do=export_xhtml&amp;id=vyuka:ios:start">
<link rel="alternate" type="text/plain" title="Wiki Markup" href="https://www.fit.vutbr.cz/%7Esmrcka/w/doku.php?do=export_raw&amp;id=vyuka:ios:start">
<link rel="canonical" href="https://www.fit.vutbr.cz/%7Esmrcka/w/doku.php?id=vyuka:ios:start">
-->
<link rel="stylesheet" media="all" type="text/css" href="./IOS  Projekt 2_files/css_003.css">
<link rel="stylesheet" media="screen" type="text/css" href="./IOS  Projekt 2_files/css_002.css">
<link rel="stylesheet" media="print" type="text/css" href="./IOS  Projekt 2_files/css.css">
<script type="text/javascript" charset="utf-8"><!--//--><![CDATA[//><!--
var NS='vyuka:ios';var SIG=' --- //[[smrcka@fit.vutbr.cz|Vyuèující IOS]] 22.02.2010 10:23//';var JSINFO = {"id":"vyuka:ios:start","namespace":"vyuka:ios"};
//--><!]]></script><link type="text/css" rel="stylesheet" href="data:text/css,">
<script type="text/javascript" charset="utf-8" src="./IOS  Projekt 2_files/js.php"></script>

  <link rel="shortcut icon" href="https://www.fit.vutbr.cz/~smrcka/w/lib/tpl/default/images/favicon.ico">

  </head><body>
<div class="dokuwiki">
    
  
  <div class="page">
    <!-- wikipage start -->
    <!-- TOC START -->
<!--
<div class="toc">
<div style="cursor: pointer;" class="tocheader toctoggle" id="toc__header"><span class="toc_close" style="cursor: pointer;" id="toc__toggle"><span>-</span></span>Table of Contents</div>
<div id="toc__inside">

<ul class="toc">
<li class="level1"><div class="li"><span class="li"><a href="#ukol" class="toc">2. Úkol</a></span></div>
<ul class="toc">
<li class="level2"><div class="li"><span class="li"><a href="#common_part" class="toc">Spoleèná èást</a></span></div></li>
<li class="level2"><div class="li"><span class="li"><a href="#varianta_a" class="toc">Varianta A</a></span></div></li>
<li class="level2"><div class="li"><span class="li"><a href="#varianta_b" class="toc">Varianta B</a></span></div></li>
</ul>
</li>
</ul>
</div>
</div>
-->
<!-- TOC END -->



<h1><a name="ukol" id="ukol">2. Projekt 2011/2012</a></h1>
<div class="level1">

<p>
<strong> Podmínky vypracování </strong>
</p>

<ul>
<li class="level1"><div class="li"> Projekt implementujte v jazyce C.</div>
</li>
<li class="level1"><div class="li"> Komentujte zdrojové kódy, programujte pøehlednì. Souèástí hodnocení bude i kvalita zdrojového kódu.</div>
</li>
<li class="level1"><div class="li"> Kontrolujte, zda se v¹echny procesy ukonèují korektnì a zda pøi ukonèování správnì uvolòujete v¹echny alokované zdroje
(napø. pro prostøedky System V mù¾ete pomocí pøíkazu <code>ipcs</code> zjistit, jaké zdroje jsou v systému alokovány).</div>
</li>
<li class="level1"><div class="li"> Dodr¾ujte syntax zadaných jmen, formát souborù a formát výstupních dat! Ètìte pozornì zadání a poznámky k vypracování u jednotlivých zadání.</div>
</li>
<li class="level1"><div class="li"> <strong>Dotazy k zadání:</strong> Ve¹keré nejasnosti a dotazy øe¹te pouze prostøednictvím diskuzního fóra k projektùm.</div>
</li>
</ul>

<p>
<strong> Podmínky pøekladu </strong>
</p>

<ul>
<li class="level1"><div class="li"> Pro pøeklad pou¾ívejte nástroj <i>make</i>. Souèástí odevzdání bude soubor <code>Makefile</code>.</div>
</li>
<li class="level1"><div class="li"> Pøeklad se provede pøíkazem <code>make</code> v adresáøi, kde je umístìn soubor <code>Makefile</code>.</div>
</li>
<li class="level1"><div class="li">Po pøekladu vznikne spustitelný soubor se jménem <code>readerWriter</code>, který bude umístìn ve stejném adresáøi 
jako soubor <code>Makefile</code>.
</div></li><li class="level1"><div class="li"> Zdrojové kódy pøekládejte s pøepínaèi <code>-std=gnu99 -Wall -Wextra -Werror -pedantic</code>.</div>
</li>
</ul>

<p>
<strong> Odevzdání </strong>
</p>

<ul>
<li class="level1"><div class="li"> Souèástí odevzdání budou pouze soubory se zdrojovými kódy (<code>*.c</code>, pøíp. <code>*.h</code>) a soubor <code>Makefile</code>. Tyto soubory zabalte pomocí tar/gzip do archivu s názvem xlogin.tar.gz, kde xlogin je vá¹ login.
</div>
</li>
<li class="level1"><div class="li"> Archiv vytvoøte tak, aby po rozbalení byl soubor Makefile umístìn ve stejném adresáøi, jako je archiv. </div>
</li>
<li class="level1"><div class="li"> Archiv xlogin.tar.gz odevzdejte prostøednictvím informaèního systému, termín <em>Projekt 2</em>.</div>
</li>
<li class="level1"><div class="li"> Pokud nebude dodr¾ena forma odevzdání nebo projekt nepùjde pøelo¾it, bude projekt hodnocen 0 body.</div>
</li>
<li class="level1"><div class="li"> <b>Archiv odevzdejte pomocí informaèního systému v dostateèném pøedstihu</b> (odevzdaný soubor mù¾ete pøed vypr¹ením termínu snadno nahradit jeho novìj¹í verzí, kdykoliv budete potøebovat).
</div>
</li>
</ul>

<p>
<strong> Opravy zadání </strong>
</p><ul>
<li class="level1"><div class="li"> Opravy zadání (chyby, pøeklepy, vyjasnìní) jsou v textu <font color="red">zvýraznìny èervenì</font>.
</div>
</li>
<li class="level1"><div class="li"> 1. oprava byla provedena 2.4.2012: úprava ukázkového výstupu (bli¾¹í komentáø viz fórum).</div></li>
<li class="level1"><div class="li"> 2. oprava byla provedena 6.4.2012: oprava korektního poøadí akcí mezi procesy.</div></li>
</ul>
<p></p>

</div>


<h2>Zadání projektu</h2> 
Implementujte sychronizaèní problém <i>ètenáø -- písaø</i>. V systému je <i>W</i> písaøù, <i>R</i> ètenáøù a sdílený prostor, 
do kterého písaøi zapisují a ze kterého ètenáøi ètou data. Ètenáøi mohou èíst data soubì¾nì, písaø zapisuje s výluèným pøístupem
(tj. pokud zapisuje jeden písaø, ostatní písaøi nemohou zapisovat a ètenáøi nemohou èíst). Implementujte variantu s <i>prioritou písaøù</i>,
tj. po¾adavky na zápis se preferují pøed po¾adavky na ètení. Pokud se objeví po¾adavek na zápis, dokonèí se ji¾ zahájené operace ètení (ètenáøi) 
a ihned poté se aktivuje písaø. Písaøi zapisují tak dlouho, dokud existují po¾adavky na zápis. Pokud nebude mít ¾ádný písaø po¾adavek na zápis,
mohou ètenáøi zaèíst èíst.

<h2>Spu¹tìní programu:</h2>
<pre class="code">$ ./readerWriter W R C SW SR OUT
</pre>
kde
<pre>W   : poèet písaøù
R   : poèet ètenáøù
C   : poèet cyklù
SW  : rozsah pro simulaci zpracování písaøem [ms]
SR  : rozsah pro simulaci zpracování ètenáøem [ms]
OUT : název výstupního souboru, do kterého se budou ukládat generované informace. Pokud se místo názvu uvede znak -, budou se informace vypisovat na standardní výstup.
</pre>
<p></p>


<h2>Implementaèní detaily</h2>
<ul>
    <li class="level1"><div class="li">Ka¾dému písaøi a ètenáøi odpovídá jeden proces. Po spu¹tìní vytváøí hlavní proces <i>W</i> procesù pro písaøe
                                       a <i>R</i> procesù pro ètenáøe (po inicializaci bude tedy existovat <i>W</i>+<i>R</i>+1 procesù).</div></li>
    <li class="level1"><div class="li">Ka¾dý proces písaøe bude internì idenfikován celým èíslem, zaèínajícím od 1. Podobnì ka¾dý proces ètenáøe bude idenfikován 
                                       celým èíslem, zaèínajícím od 1.</div></li>
    <li class="level1"><div class="li">Ka¾dý proces vykonává své akce a souèasnì zapisuje informace o akcích buï do souboru <i>OUT</i>, nebo na standardní
                                       výstup, pokud je místo <i>OUT</i> uvedeno <i>-</i>. Pøístup k výstupnímu zaøízení (zápis informací) musí být výluèný; 
                                       pokud zapisuje jeden proces a dal¹í chce také zapisovat, musí poèkat na uvolnìní zdroje.</div></li> 
    <li class="level1"><div class="li">Souèástí výstupních informací o akci je poøadové èíslo <i>A</i> provádìné akce (viz popis výstupù). 
                                       Akce se èíslují od jednièky. </div></li>
    <li class="level1"><div class="li">Pro implementaci sdíleného prostoru a èítaèe akcí pou¾ijte sdílenou pamì». 
    <ul>
    	<li class="level1"><div class="li"><i>Sdílený prostor:</i> Pøedpokládejte velikost sdíleného prostoru jedna polo¾ka typu <i>int</i>. 
                                              Pøi vytvoøení inicializujte její obsah na hodnotu <i>-1</i>.</div></li> 
    	<li class="level1"><div class="li"><i>Èítaè akcí:</i> Pøedpokládejte velikost pamìti jedna polo¾ka typu <i>int</i>. 
                                              Pøi vytvoøení inicializujte její obsah na hodnotu <i>1</i>.
                                              Pøed ka¾dým výpisem informací o akci se pøeète èíslo akce ze sdílené pamìti, pou¾ije a zpìt zapí¹e 
                                              nová hodnota zvìt¹ená o 1. Pøístup k èítaèi musí být výluèný.</div></li> 
    	<li class="level1"><div class="li"><i>Doporuèení:</i> Sdílený prostor i èítaè lze realizovat jako sdílenou pamì» obsahující dvì polo¾ky (jednu pro
					      sdílený prostor a jednu pro èítaè).</div></li> 
    </ul>
    </div></li><li class="level1"><div class="li">Pro synchronizaci procesù pou¾ijte semafory (System V nebo POSIX).</div></li>
    <li class="level1"><div class="li">Hlavní proces èeká na ukonèení v¹ech písaøù. Poté zapí¹e do sdíleného prostoru hodnotu 0 a èeká na ukonèení ètenáøù.
                                       Pøi úspì¹ném ukonèení bude návratová hodnota 0.</div></li>
    <li class="level1"><div class="li">Pokud nìkterý ze vstupù nebude odpovídat oèekávanému formátu, program vytiskne chybové hlá¹ení na standardní chybový 
                                       výstup a ukonèí se s návratovou hodnotou 1.</div></li>
    <li class="level1"><div class="li"> Pro generování unikátních klíèù (sdílená pamì» apod.) pou¾ijte funkci ftok.</div></li>
    <li class="level1"><div class="li"> C funkce: fork, wait, shmget, shmat, semget, semctl, sem_open, ...</div></li>
</ul>

<p>
<strong>Proces písaøe</strong> a výstupní formát ti¹tìných informací:
</p><ul>
    <li class="level1"><div class="li"> tiskne informaci o výpoètu nové hodnoty: <pre>A: writer: I: new value</pre></div></li>
    <li class="level1"><div class="li"> simuluje výpoèet; uspí se na dobu, která je generována náhodnì v rozmezí 0 a¾ <i>SW</i> v ms (pokud 
                                        je <i>SW=0</i>, proces se neuspí a ihned pokraèuje dále)</div></li>
    <li class="level1"><div class="li"> písaø je pøipraven zapsat hodnotu (svou interní identifikaci), tiskne informaci: <pre>A: writer: I: ready</pre></div></li>
    <li class="level1"><div class="li"> vkládá hodnotu (svou identifikaci) do sdíleného prostoru</div></li>
    <ul>
    <li class="level1"><div class="li"> tìsnì pøed vlo¾ením tiskne informaci: <pre>A: writer: I: writes a value</pre></div></li>
    <li class="level1"><div class="li"> ihned po vlo¾ení tiskne informaci: <pre>A: writer: I: written</pre></div></li>
    </ul>
    <li class="level1"><div class="li"> pokud je poèet vlo¾ení roven hodnotì <i>C</i>, proces se ukonèí, jinak se celý opakuje</div></li>
</ul>
<p></p>

<p>
<strong>Proces ètenáøe</strong> a výstupní formát ti¹tìných informací:
</p><ul>
    <li class="level1"><div class="li"> ètenáø je pøipraven pøeèíst hodnotu, tiskne informaci: <pre>A: reader: I: ready</pre></div></li>
    <li class="level1"><div class="li"> ète hodnotu ze sdíleného prostoru (hodnotou je interní identifikaci písaøe, který do sdíleného prostoru naposledy zapisoval)</div></li>
    <ul>
    <li class="level1"><div class="li"> tìsnì pøed ètením tiskne informaci: <pre>A: reader: I: reads a value</pre></div></li>
    <li class="level1"><div class="li"> ihned po ètení tiskne informaci (<i>X</i> je pøeètená hodnota): <pre>A: reader: I: read: X</pre></div></li>
    </ul>
    <li class="level1"><div class="li"> simuluje výpoèet; uspí se na dobu, která je generována náhodnì v rozmezí 0 a¾ <i>SR</i> v ms (pokud 
                                        je <i>SR=0</i>, proces se neuspí a ihned pokraèuje dále)</div></li>
    <li class="level1"><div class="li"> pokud je pøeètená hodnota rovna <i>0</i>, proces se ukonèí, jinak se celý opakuje</div></li>
</ul>
<p></p>

<p>
<strong>Poznámka k výstupu:</strong>
</p><ul> 
    <li class="level1"><div class="li"><i>A</i> je poøadové èíslo provádìné akce.</div></li>
    <li class="level1"><div class="li"><i>I</i> je interní identifikátor písaøe (ètenáøe).</div></li>
</ul>
<p></p>


<h2>Ukázka spu¹tìní a výstupù programu</h2>
<p><strong>1)</strong> 1 písaø, 3 ètenáøi, systém se ukonèí po 10 zápisech písaøe, písaø èeká v intervalu 0 a¾ 20 ms, ètenáø èeká v intervalu 0 30 ms a informace se budou ukládat do souboru out.txt.
</p><pre class="code">$ ./readerWriter 1 3 10 20 30 out.txt
</pre>
<p></p>

<p><strong>2)</strong> 1 písaø, 1 ètenáø, systém se ukonèí po 1 zápise písaøe, písaø ani ètenáø neèekají a informace se budou tisknout na standardní výstup.
</p><pre class="code">$ ./readerWriter 1 1 1 0 0 -
1: writer: 1: new value
2: writer: 1: ready
3: writer: 1: writes a value
4: writer: 1: written
5: reader: 1: ready
6: reader: 1: reads a value
7: reader: 1: read: 1
<font color="red">8: reader: 1: ready
9: reader: 1: reads a value
10: reader: 1: read: 0</font>
</pre>
<p></p>

<p><strong>2a)</strong> Mo¾ná varianta výstupu:
</p><pre class="code">$ ./readerWriter 1 1 1 0 0 -
1: reader: 1: ready
2: reader: 1: reads a value
3: reader: 1: read: -1
4: writer: 1: new value
5: writer: 1: ready
6: writer: 1: writes a value
7: writer: 1: written
8: reader: 1: ready
9: reader: 1: reads a value
10: reader: 1: read: 1
<font color="red">11: reader: 1: ready
12: reader: 1: reads a value
13: reader: 1: read: 0</font>
</pre>
<p></p>

<p><strong>2b)</strong> Mo¾ná varianta výstupu:
</p><pre class="code">$ ./readerWriter 1 1 1 0 0 -
1: reader: 1: ready
2: writer: 1: new value
3: writer: 1: ready
4: writer: 1: writes a value
5: writer: 1: written
6: reader: 1: reads a value
7: reader: 1: read: 1
<font color="red">8: reader: 1: ready
9: reader: 1: reads a value
10: reader: 1: read: 0</font>
</pre>
<p></p>

<p><strong>Poznámka:</strong><br><br>
Poøadí ve výstupu se mù¾e li¹it v závislosti na èasování procesù.
V rámci jednoho procesu musí být zachováno správné poøadí, napø. pro proces ètenáøe je mo¾ná pouze tato sekvence:
</p><pre>ready
reads a value
read
</pre>
<p></p>

Také musí být zachováno korektní poøadí akcí mezi procesy, napø. 
<ul>
<li class="level1"><div class="li">mezi <i>writes a value</i> a <i>written</i> procesu písaøe nesmí být ¾ádný <font color="red">z následujících výpisù:
<i>writes a value</i>, <i>written</i>, <i>reads a value</i> a <i>read: X</i>,
</font></div></li>  
<li class="level1"><div class="li">mezi <i>reads a value</i> a <i>read: X</i> procesu ètenáøe nesmí být ¾ádný z následujících výpisù z procesù písaøù:
<i>writes a value</i> a <i>written</i>,</div></li>  
<li class="level1"><div class="li">...</div></li> 
</ul>


<!--
<p>
<strong>Pou¾ití programu:</strong>

</p>
<pre class="code">$ ./findproc N
findproc prints PID of every process that conforms to specific criteria
usage: findproc criterion1 [criterion2 [...]]
criteria:
    -n regexp      the process name matches regexp
    -a regexp      an argument of a process matches regexp
    -c regexp      the current working directory matches regexp
    -x file        the process executable file is the same as file
</pre>
-->

</div>

<br><hr><br>



</div></body></html>